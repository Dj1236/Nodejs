we are going to start the node 
as we write js code we execute the js code inside the browser but we cannot execute  it outside of the browser.
when we write js code it is execute through the js engine and js engine is only execute in the individual browser .
rayn dayl connected v8 engine to the c++ and called it node js 
with the node js we can execute the code outside of the browser .
node is simply runtime env for the js 
here in node dom is not included or we can say window object is not available
modules in node js :-Modules help in organizing and structuring code, promoting code reusability, and enhancing the maintainability of a Node.js application.
Node.js uses the require function to include modules. The require function takes the module name (either a core module or a path to a user-defined module) and returns the module's exports
t's also common to create modules that export multiple functions or objects. The module.exports object can be extended with additional properties to expose various elements from a module
file handling in node js :- File handling in Node.js involves using the built-in fs (File System) module, which provides methods for interacting with the file system
function like :- reading file , writing file , delete file , append file , mkdr , copy file .

node js architecture :- first of all client request to the node js server , then the request is gone inside the event queue , and the 
event queue is connected to the event loop  the function of event loop is to take the request from the event queue and process it 
our request is of two type first is async and sync req or we can say blocking and non blocking req 
if it is blocking opreationn then the request is gone to the thread pool (it have worker to perform the tasks or we can say threads )
and if its is non blocking(directly opreationn is done )  then callback function will be passed as a parameter to that function so when ever the task is completed the call back function will be executed  
let's see how we can do this : -
javascript has only one thread but with the help of event loop and worker threads  
we can achieve parallelism by using callback functions  js uses single threaded event loop model which means at any time there is only one block of JS code being executed.
js uses single threaded event loop model where all the tasks are placed into the queue  and after each task is finished from the queue the next task is taken out of the queue and executed
http server :- const http = require('http');

// Create a server object
const server = http.createServer((req, res) => {
  // Set the response HTTP header with status code 200 and Content-Type text/plain
  res.writeHead(200, {'Content-Type': 'text/plain'});
  
  // Send the response body as "Hello World"
  res.end('Hello World\n');
});

// Specify the port number the server will listen on
const port = 3000;

// Start the server and make it listen on the specified port
server.listen(port, () => {
  console.log(`Server running at http://localhost:${port}/`);
});
url in node:- parsing(divide url) , formating(joins the url ) , building(concating url) , extracting(executing)
http methods:- jyare pan aapde browser ma search kariye tyare e by default get method  use kare 
get req:- when you want to get data from the browser .
post :- when you want to send and mutate data to the browser.
put :- upload
patch :- change karva mate
delete :- delete karva mate
const http = require('http');

const server = http.createServer((req, res) => {
  if (req.method === 'GET') {
    // Handle GET request
  } else if (req.method === 'POST') {
    // Handle POST request
  } else if (req.method === 'PUT') {
    // Handle PUT request
  } else if (req.method === 'DELETE') {
    // Handle DELETE request
  } else {
    res.writeHead(405); // Method Not Allowed
    res.end();
  }
});

const port = 3000;
server.listen(port, () => {
  console.log(`Server running at http://localhost:${port}/`);
});
const express = require('express');
const app = express();

// GET request
app.get('/', (req, res) => {
  res.send('GET request received');
});

// POST request
app.post('/', (req, res) => {
  res.send('POST request received');
});

// PUT request
app.put('/', (req, res) => {
  res.send('PUT request received');
});

// DELETE request
app.delete('/', (req, res) => {
  res.send('DELETE request received');
});

const port = 3000;
app.listen(port, () => {
  console.log(`Express server running at http://localhost:${port}/`);
});

what is express js :-Express.js is a popular web application framework for Node.js that simplifies the process of building web applications and APIs. 
It provides built-in support for handling various HTTP methods.
You can create an Express app and define routes for different HTTP methods using methods like app.get(), app.post(), app.put(), and app.delete().
const express = require('express');
const app = express();

// GET request
app.get('/', (req, res) => {
  res.send('GET request received');
});

// POST request
app.post('/', (req, res) => {
  res.send('POST request received');
});

// PUT request
app.put('/', (req, res) => {
  res.send('PUT request received');
});

// DELETE request
app.delete('/', (req, res) => {
  res.send('DELETE request received');
});

const port = 3000;
app.listen(port, () => {
  console.log(`Express server running at http://localhost:${port}/`);
});

what is Versioning in nodejs ?  ^ :- aana thi upar na version download kare 
version:- ^4.18.2 2is minor(optional) fixes in the version. 18is reccommned(changing or addding feature) bugged fixed version   4 is a major relase in the update major and breaking update 
Versioning is a technique used to manage different versions of APIs or software while maintaining backward compatibility with older versions. In the context of Node  

What is REST API? 
A RESTful web service is an application programming interface that uses the Representational State Transfer .REST stands for Representational State Transfer.
It's an architectural style that defines how the client interacts with the server to get data
rules(standards) of rest:- 1) works on server client architecture .
( the html document that is send by the server is in the response of the client req is SSR (server side rendering))
if you know that your client is browser than you can send html document it is good practicing but if it is mobile device or any else device 
than we have to give the json data that we have to parse in the any used frontend technology
2. always respect the http methods:-


express middleware :-  it's just functions that run and execute some specific task before or after executing other code/function -GET : retrieve information from the server
middleware is the function that process the req   and res object which contain details about the incoming request
ek code ma multiple middleware hoi sake e req check kare ke req safe aane authorized che ne 
middleware has an acess of req and response and next middleware object


Http headers and status codes:-(extrea information )
important part of api request and response as they contains the meta data asscoiated with an api .
it carry  information about the request and provide information about the response  
- Http headers are key value pairs sent by the  client to the server along with the request method
- Status Codes are standard responses from the server indicating various conditions and actions for the clients
- Status Codes are standard responses from the server indicating various conditions and results 

Mongo db:-  mongo is no-sql document based database ,support aggeration pipelines, works on the BSON data , 
like sql it stores data in the table  format but instead of tables it uses collections which contain documents .

model view controller architecture ( MVC):-
MVC stands for Model-View-Controller, which is a software architectural pattern commonly used in web development, including Node.js applications.
 MVC separates an application into three main components
 Model: The Model represents the data and business logic of the application. It interacts with the database or external data sources to perform CRUD (Create, Read, Update, Delete) operations and encapsulates the data manipulation and validation logic. In Node.js, the model layer typically consists of Mongoose models when using MongoDB or Sequelize models when using SQL databases.

View: The View is responsible for presenting the data to the user in a user-friendly format. It generates the user interface (UI) elements such as HTML, CSS, and client-side JavaScript to render the data received from the controller or directly from the model. In Node.js, views are often created using templating engines like EJS, Pug (formerly Jade), Handlebars, etc.

Controller: The Controller acts as an intermediary between the Model and the View. It receives user input from the View, processes it, interacts with the Model to perform necessary operations, and determines which View to render in response. Controllers contain the application's business logic, handle HTTP requests, and orchestrate the flow of data between the Model and the View. In Node.js, controllers are implemented as route handlers using frameworks like Express.js.

In a Node.js application following the MVC pattern:

Routes define the application's endpoints and map HTTP requests to corresponding controller actions.
Controllers handle the incoming requests, process the data, interact with the model layer, and render the appropriate views.
Models represent the application's data structures and provide methods to perform database operations.
Views render dynamic content using templates, incorporating data provided by controllers.
Here's a simplified example of a Node.js application structure using the MVC pattern:
project/
├── controllers/
│   └── userController.js
├── models/
│   └── userModel.js
├── views/
│   └── userView.ejs
├── routes/
│   └── userRoutes.js
├── app.js (or index.js)
└── package.json
